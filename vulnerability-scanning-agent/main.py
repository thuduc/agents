#!/usr/bin/env python3
"""
Main entry point for the vulnerability scanning agent
"""

import asyncio
import logging
import sys
import argparse
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.models import Config
from src.core.agent import VulnerabilityScanningAgent
from src.config.manager import ConfigManager


async def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description='Vulnerability Scanning Agent')
    parser.add_argument('--config', '-c', help='Configuration file path')
    parser.add_argument('--daemon', '-d', action='store_true', help='Run as daemon with scheduled scanning')
    parser.add_argument('--scan-once', action='store_true', help='Run a single scan and exit')
    parser.add_argument('--repository', '-r', help='Scan specific repository only')
    
    args = parser.parse_args()
    
    # Setup logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Load configuration
    config_manager = ConfigManager(args.config)
    config_manager.setup_logging()
    config = config_manager.get_config()
    
    # Create and initialize agent
    agent = VulnerabilityScanningAgent(Config(
        bitbucket_workspace=config.bitbucket.workspace,
        bitbucket_username=config.bitbucket.username,
        bitbucket_app_password=config.bitbucket.app_password,
        nvd_api_key=config.cve_sources.nvd_api_key,
        snyk_api_token=config.cve_sources.snyk_api_token,
        oss_index_username=config.cve_sources.oss_index_username,
        oss_index_token=config.cve_sources.oss_index_token,
        dynamodb_region=config.database.region,
        dynamodb_table_prefix=config.database.table_prefix,
        scan_schedule=config.scanning.schedule,
        max_concurrent_scans=config.scanning.max_concurrent_scans,
        scan_timeout=config.scanning.scan_timeout
    ))
    
    await agent.initialize()
    
    if args.scan_once:
        # Run single scan
        logging.info("Starting one-time vulnerability scan...")
        results = await agent.scan_all_repositories()
        
        total_vulnerabilities = sum(len(vulns) for vulns in results.values())
        logging.info(f"Scan completed. Found {total_vulnerabilities} vulnerabilities across {len(results)} repositories")
        
        # Print summary
        for repo, vulns in results.items():
            if vulns:
                critical = len([v for v in vulns if v.severity.value == 'CRITICAL'])
                high = len([v for v in vulns if v.severity.value == 'HIGH'])
                medium = len([v for v in vulns if v.severity.value == 'MEDIUM'])
                low = len([v for v in vulns if v.severity.value == 'LOW'])
                
                print(f"\n{repo}: {len(vulns)} vulnerabilities")
                print(f"  Critical: {critical}, High: {high}, Medium: {medium}, Low: {low}")
    
    elif args.daemon:
        # Start scheduled scanning
        logging.info("Starting vulnerability scanning agent in daemon mode...")
        agent.start_scheduled_scanning()
    
    else:
        # Default: run single scan
        logging.info("Starting vulnerability scan...")
        results = await agent.scan_all_repositories()
        
        total_vulnerabilities = sum(len(vulns) for vulns in results.values())
        logging.info(f"Scan completed. Found {total_vulnerabilities} vulnerabilities across {len(results)} repositories")


if __name__ == "__main__":
    asyncio.run(main())