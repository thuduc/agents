#!/usr/bin/env python3
"""
BitBucket repository scanner for dependency files
"""

import logging
from typing import Dict, List, Any
import aiohttp

from ..core.models import Config, DependencyFile


class BitBucketScanner:
    """Scans BitBucket repositories for Python dependency files"""
    
    def __init__(self, config: Config):
        self.config = config
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            auth=aiohttp.BasicAuth(self.config.bitbucket_username, self.config.bitbucket_app_password)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_repositories(self) -> List[Dict[str, Any]]:
        """Get all repositories in the workspace"""
        url = f"https://api.bitbucket.org/2.0/repositories/{self.config.bitbucket_workspace}"
        repositories = []
        
        while url:
            async with self.session.get(url) as response:
                if response.status != 200:
                    logging.error(f"Failed to fetch repositories: {response.status}")
                    break
                    
                data = await response.json()
                repositories.extend(data.get('values', []))
                url = data.get('next')
                
        return repositories
    
    async def find_dependency_files(self, repo_name: str) -> List[Dict[str, str]]:
        """Find requirements.txt and setup.py files in a repository"""
        dependency_files = []
        
        # Search for requirements files
        search_patterns = ['requirements.txt', 'requirements/*.txt', 'setup.py', 'pyproject.toml']
        
        for pattern in search_patterns:
            url = f"https://api.bitbucket.org/2.0/repositories/{self.config.bitbucket_workspace}/{repo_name}/src/HEAD/{pattern}"
            
            try:
                async with self.session.get(url) as response:
                    if response.status == 200:
                        content = await response.text()
                        dependency_files.append({
                            'file_path': pattern,
                            'content': content,
                            'repository': repo_name,
                            'file_type': self._get_file_type(pattern)
                        })
            except Exception as e:
                logging.debug(f"File {pattern} not found in {repo_name}: {e}")
                
        return dependency_files
    
    def _get_file_type(self, file_path: str) -> str:
        """Determine the file type from the path"""
        if 'requirements' in file_path.lower():
            return 'requirements.txt'
        elif 'setup.py' in file_path.lower():
            return 'setup.py'
        elif 'pyproject.toml' in file_path.lower():
            return 'pyproject.toml'
        else:
            return 'unknown'