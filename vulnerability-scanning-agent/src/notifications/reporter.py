#!/usr/bin/env python3
"""
Vulnerability reporting and notification system
"""

import logging
from typing import List, Dict, Any

from ..core.models import Vulnerability, SeverityLevel
from ..storage.dynamodb_storage import DynamoDBStorage


class VulnerabilityReporter:
    """Handles real-time reporting and alerting"""
    
    def __init__(self, storage: DynamoDBStorage):
        self.storage = storage
        
    async def generate_security_dashboard(self) -> Dict[str, Any]:
        """Generate security dashboard data"""
        vulnerabilities = await self.storage.get_all_vulnerabilities()
        
        dashboard_data = {
            'total_vulnerabilities': len(vulnerabilities),
            'severity_breakdown': self._calculate_severity_breakdown(vulnerabilities),
            'top_packages': self._get_top_vulnerable_packages(vulnerabilities),
            'recent_scans': self._get_recent_scan_summary(vulnerabilities)
        }
        
        return dashboard_data
    
    async def send_critical_alerts(self, vulnerabilities: List[Vulnerability]):
        """Send alerts for critical vulnerabilities"""
        critical_vulns = [v for v in vulnerabilities if v.severity == SeverityLevel.CRITICAL]
        
        if critical_vulns:
            logging.warning(f"Found {len(critical_vulns)} critical vulnerabilities!")
            
            # In a real implementation, this would send notifications via:
            # - Email
            # - Slack
            # - Microsoft Teams
            # - PagerDuty
            # - etc.
            
            for vuln in critical_vulns:
                await self._send_notification(
                    level="CRITICAL",
                    title=f"Critical Vulnerability Found: {vuln.cve_id}",
                    message=f"Package: {vuln.package_name}@{vuln.affected_version}\n"
                           f"CVSS Score: {vuln.cvss_score}\n"
                           f"Description: {vuln.description[:200]}..."
                )
    
    async def _send_notification(self, level: str, title: str, message: str):
        """Send notification via configured channels"""
        # Placeholder for notification implementation
        logging.info(f"[{level}] {title}: {message}")
    
    def _calculate_severity_breakdown(self, vulnerabilities: List[Dict]) -> Dict[str, int]:
        """Calculate vulnerability counts by severity"""
        breakdown = {
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0
        }
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', '').lower()
            if severity in breakdown:
                breakdown[severity] += 1
                
        return breakdown
    
    def _get_top_vulnerable_packages(self, vulnerabilities: List[Dict], top_n: int = 10) -> List[Dict]:
        """Get the most vulnerable packages"""
        package_counts = {}
        
        for vuln in vulnerabilities:
            package = vuln.get('package_name', '')
            if package:
                package_counts[package] = package_counts.get(package, 0) + 1
        
        top_packages = sorted(package_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]
        
        return [{'package': pkg, 'vulnerability_count': count} for pkg, count in top_packages]
    
    def _get_recent_scan_summary(self, vulnerabilities: List[Dict]) -> Dict[str, Any]:
        """Get summary of recent scanning activity"""
        if not vulnerabilities:
            return {'total_scans': 0, 'latest_scan': None}
        
        # Get unique scan IDs
        scan_ids = set(v.get('scan_id', '') for v in vulnerabilities if v.get('scan_id'))
        
        # Get latest scan timestamp
        scan_timestamps = [v.get('scan_timestamp') for v in vulnerabilities if v.get('scan_timestamp')]
        latest_scan = max(scan_timestamps) if scan_timestamps else None
        
        return {
            'total_scans': len(scan_ids),
            'latest_scan': latest_scan,
            'repositories_scanned': len(set(v.get('repository', '') for v in vulnerabilities))
        }