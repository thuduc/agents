#!/usr/bin/env python3
"""
Health monitoring and system metrics
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, Any


class HealthMonitor:
    """Monitors system health and performance metrics"""
    
    def __init__(self):
        self.start_time = time.time()
        self.scan_metrics = {
            'total_scans': 0,
            'successful_scans': 0,
            'failed_scans': 0,
            'average_scan_duration': 0.0
        }
        
    async def get_health_status(self) -> Dict[str, Any]:
        """Get current system health status"""
        uptime_seconds = time.time() - self.start_time
        
        health_status = {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'uptime_seconds': uptime_seconds,
            'uptime_human': self._format_uptime(uptime_seconds),
            'system_metrics': await self._get_system_metrics(),
            'scan_metrics': self.scan_metrics
        }
        
        return health_status
    
    async def _get_system_metrics(self) -> Dict[str, Any]:
        """Get system-level metrics"""
        try:
            import psutil
            
            # CPU and memory usage
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            
            return {
                'cpu_usage_percent': cpu_percent,
                'memory_usage_percent': memory.percent,
                'memory_available_mb': memory.available / (1024 * 1024),
                'memory_total_mb': memory.total / (1024 * 1024)
            }
        except ImportError:
            return {
                'cpu_usage_percent': 0,
                'memory_usage_percent': 0,
                'memory_available_mb': 0,
                'memory_total_mb': 0,
                'note': 'psutil not available'
            }
    
    def _format_uptime(self, seconds: float) -> str:
        """Format uptime in human readable format"""
        days = int(seconds // 86400)
        hours = int((seconds % 86400) // 3600)
        minutes = int((seconds % 3600) // 60)
        
        if days > 0:
            return f"{days}d {hours}h {minutes}m"
        elif hours > 0:
            return f"{hours}h {minutes}m"
        else:
            return f"{minutes}m"
    
    def record_scan_start(self, scan_id: str):
        """Record the start of a scan"""
        logging.info(f"Scan started: {scan_id}")
        
    def record_scan_completion(self, scan_id: str, duration: float, success: bool):
        """Record scan completion"""
        self.scan_metrics['total_scans'] += 1
        
        if success:
            self.scan_metrics['successful_scans'] += 1
        else:
            self.scan_metrics['failed_scans'] += 1
        
        # Update average duration
        total_duration = (self.scan_metrics['average_scan_duration'] * 
                         (self.scan_metrics['total_scans'] - 1)) + duration
        self.scan_metrics['average_scan_duration'] = total_duration / self.scan_metrics['total_scans']
        
        status = "completed successfully" if success else "failed"
        logging.info(f"Scan {status}: {scan_id} (duration: {duration:.2f}s)")
    
    async def check_external_dependencies(self) -> Dict[str, bool]:
        """Check connectivity to external dependencies"""
        dependencies = {
            'nvd_api': await self._check_nvd_connectivity(),
            'oss_index': await self._check_oss_index_connectivity(),
            'bitbucket_api': await self._check_bitbucket_connectivity(),
            'dynamodb': await self._check_dynamodb_connectivity()
        }
        
        return dependencies
    
    async def _check_nvd_connectivity(self) -> bool:
        """Check NVD API connectivity"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get('https://services.nvd.nist.gov/rest/json/cves/2.0', 
                                     timeout=aiohttp.ClientTimeout(total=5)) as response:
                    return response.status == 200
        except:
            return False
    
    async def _check_oss_index_connectivity(self) -> bool:
        """Check OSS Index connectivity"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get('https://ossindex.sonatype.org',
                                     timeout=aiohttp.ClientTimeout(total=5)) as response:
                    return response.status == 200
        except:
            return False
    
    async def _check_bitbucket_connectivity(self) -> bool:
        """Check BitBucket API connectivity"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.bitbucket.org/2.0/user',
                                     timeout=aiohttp.ClientTimeout(total=5)) as response:
                    return response.status in [200, 401]  # 401 is expected without auth
        except:
            return False
    
    async def _check_dynamodb_connectivity(self) -> bool:
        """Check DynamoDB connectivity"""
        try:
            import boto3
            from botocore.exceptions import NoCredentialsError, ClientError
            
            dynamodb = boto3.client('dynamodb', region_name='us-east-1')
            dynamodb.list_tables()
            return True
        except (NoCredentialsError, ClientError):
            return False
        except:
            return False