#!/usr/bin/env python3
"""
DynamoDB storage backend for vulnerability data
"""

import logging
from datetime import datetime
from typing import List, Dict, Optional
import boto3
from botocore.exceptions import ClientError

from ..core.models import Config, Vulnerability


class DynamoDBStorage:
    """Handles storage and retrieval of scan results in DynamoDB"""
    
    def __init__(self, config: Config):
        self.config = config
        self.dynamodb = boto3.resource('dynamodb', region_name=config.dynamodb_region)
        self.scan_results_table = f"{config.dynamodb_table_prefix}-scan-results"
        self.repositories_table = f"{config.dynamodb_table_prefix}-repositories"
        
    async def initialize_tables(self):
        """Create DynamoDB tables if they don't exist"""
        try:
            # Scan results table
            self.dynamodb.create_table(
                TableName=self.scan_results_table,
                KeySchema=[
                    {'AttributeName': 'scan_id', 'KeyType': 'HASH'},
                    {'AttributeName': 'vulnerability_id', 'KeyType': 'RANGE'}
                ],
                AttributeDefinitions=[
                    {'AttributeName': 'scan_id', 'AttributeType': 'S'},
                    {'AttributeName': 'vulnerability_id', 'AttributeType': 'S'},
                    {'AttributeName': 'repository', 'AttributeType': 'S'},
                    {'AttributeName': 'severity', 'AttributeType': 'S'},
                    {'AttributeName': 'scan_timestamp', 'AttributeType': 'S'}
                ],
                GlobalSecondaryIndexes=[
                    {
                        'IndexName': 'repository-severity-index',
                        'KeySchema': [
                            {'AttributeName': 'repository', 'KeyType': 'HASH'},
                            {'AttributeName': 'severity', 'KeyType': 'RANGE'}
                        ],
                        'Projection': {'ProjectionType': 'ALL'},
                        'BillingMode': 'PAY_PER_REQUEST'
                    },
                    {
                        'IndexName': 'scan-timestamp-index',
                        'KeySchema': [
                            {'AttributeName': 'scan_timestamp', 'KeyType': 'HASH'}
                        ],
                        'Projection': {'ProjectionType': 'ALL'},
                        'BillingMode': 'PAY_PER_REQUEST'
                    }
                ],
                BillingMode='PAY_PER_REQUEST'
            )
            
            # Repositories table
            self.dynamodb.create_table(
                TableName=self.repositories_table,
                KeySchema=[
                    {'AttributeName': 'repository', 'KeyType': 'HASH'}
                ],
                AttributeDefinitions=[
                    {'AttributeName': 'repository', 'AttributeType': 'S'},
                    {'AttributeName': 'last_scan', 'AttributeType': 'S'}
                ],
                GlobalSecondaryIndexes=[
                    {
                        'IndexName': 'last-scan-index',
                        'KeySchema': [
                            {'AttributeName': 'last_scan', 'KeyType': 'HASH'}
                        ],
                        'Projection': {'ProjectionType': 'ALL'},
                        'BillingMode': 'PAY_PER_REQUEST'
                    }
                ],
                BillingMode='PAY_PER_REQUEST'
            )
            
        except ClientError as e:
            if e.response['Error']['Code'] != 'ResourceInUseException':
                logging.error(f"Failed to create tables: {e}")
    
    async def store_scan_results(self, scan_id: str, repository: str, vulnerabilities: List[Vulnerability]):
        """Store scan results in DynamoDB"""
        table = self.dynamodb.Table(self.scan_results_table)
        
        with table.batch_writer() as batch:
            for vuln in vulnerabilities:
                item = {
                    'scan_id': scan_id,
                    'vulnerability_id': f"{vuln.cve_id}_{vuln.package_name}_{vuln.affected_version}",
                    'repository': repository,
                    'cve_id': vuln.cve_id,
                    'package_name': vuln.package_name,
                    'affected_version': vuln.affected_version,
                    'severity': vuln.severity.value,
                    'description': vuln.description,
                    'cvss_score': str(vuln.cvss_score),
                    'published_date': vuln.published_date.isoformat(),
                    'references': vuln.references,
                    'source': vuln.source,
                    'scan_timestamp': datetime.now().isoformat()
                }
                batch.put_item(Item=item)
    
    async def get_repository_vulnerabilities(self, repository: str, severity_filter: Optional[str] = None) -> List[Dict]:
        """Get vulnerabilities for a specific repository"""
        table = self.dynamodb.Table(self.scan_results_table)
        
        if severity_filter:
            response = table.query(
                IndexName='repository-severity-index',
                KeyConditionExpression='repository = :repo AND severity = :sev',
                ExpressionAttributeValues={
                    ':repo': repository,
                    ':sev': severity_filter
                }
            )
        else:
            response = table.query(
                IndexName='repository-severity-index',
                KeyConditionExpression='repository = :repo',
                ExpressionAttributeValues={':repo': repository}
            )
            
        return response.get('Items', [])
    
    async def get_all_vulnerabilities(self) -> List[Dict]:
        """Get all stored vulnerabilities"""
        table = self.dynamodb.Table(self.scan_results_table)
        response = table.scan()
        return response.get('Items', [])