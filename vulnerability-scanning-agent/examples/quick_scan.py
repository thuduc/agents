#!/usr/bin/env python3
"""
Quick scan example - demonstrates basic vulnerability scanning
"""

import asyncio
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from src.core.models import Config
from src.core.agent import VulnerabilityScanningAgent


async def quick_scan_example():
    """Example of running a quick vulnerability scan"""
    
    # Configure the agent
    config = Config(
        bitbucket_workspace="your-workspace",
        bitbucket_username="your-username", 
        bitbucket_app_password="your-app-password",
        nvd_api_key="your-nvd-key",  # Optional
        dynamodb_region="us-east-1",
        dynamodb_table_prefix="demo-vuln-scanner",
        max_concurrent_scans=3
    )
    
    # Create and initialize agent
    agent = VulnerabilityScanningAgent(config)
    await agent.initialize()
    
    print("🔍 Starting vulnerability scan...")
    
    # Run the scan
    results = await agent.scan_all_repositories()
    
    # Print results
    total_vulnerabilities = 0
    for repo_name, vulnerabilities in results.items():
        if vulnerabilities:
            print(f"\n📦 Repository: {repo_name}")
            print(f"   Total vulnerabilities: {len(vulnerabilities)}")
            
            # Group by severity
            severity_counts = {}
            for vuln in vulnerabilities:
                severity = vuln.severity.value
                severity_counts[severity] = severity_counts.get(severity, 0) + 1
            
            for severity, count in severity_counts.items():
                emoji = {"CRITICAL": "🚨", "HIGH": "⚠️", "MEDIUM": "⚡", "LOW": "ℹ️"}.get(severity, "")
                print(f"   {emoji} {severity}: {count}")
            
            total_vulnerabilities += len(vulnerabilities)
    
    print(f"\n✅ Scan completed!")
    print(f"📊 Total vulnerabilities found: {total_vulnerabilities}")
    print(f"🏢 Repositories scanned: {len(results)}")


if __name__ == "__main__":
    asyncio.run(quick_scan_example())