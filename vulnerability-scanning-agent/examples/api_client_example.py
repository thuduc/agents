#!/usr/bin/env python3
"""
API client example - demonstrates how to interact with the vulnerability dashboard API
"""

import asyncio
import aiohttp
import json


class VulnerabilityAPIClient:
    """Simple client for vulnerability dashboard API"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_dashboard_summary(self):
        """Get dashboard summary"""
        async with self.session.get(f"{self.base_url}/api/v1/dashboard") as response:
            return await response.json()
    
    async def get_repositories(self):
        """Get list of repositories"""
        async with self.session.get(f"{self.base_url}/api/v1/repositories") as response:
            return await response.json()
    
    async def search_vulnerabilities(self, **params):
        """Search vulnerabilities"""
        async with self.session.get(f"{self.base_url}/api/v1/vulnerabilities/search", params=params) as response:
            return await response.json()
    
    async def get_executive_report(self):
        """Get executive report"""
        async with self.session.get(f"{self.base_url}/api/v1/reports/executive") as response:
            return await response.json()
    
    async def trigger_scan(self, repository=None):
        """Trigger a new scan"""
        data = {}
        if repository:
            data['repository'] = repository
            
        async with self.session.post(f"{self.base_url}/api/v1/scan/trigger", json=data) as response:
            return await response.json()


async def api_example():
    """Example of using the API client"""
    
    try:
        async with VulnerabilityAPIClient() as client:
            print("üîó Testing API connectivity...")
            
            # Get dashboard summary
            print("\nüìä Dashboard Summary:")
            summary = await client.get_dashboard_summary()
            print(f"Total vulnerabilities: {summary['total_vulnerabilities']}")
            print(f"Repositories scanned: {summary['repositories_scanned']}")
            
            severity = summary['severity_breakdown']
            print(f"Critical: {severity['critical']}, High: {severity['high']}, Medium: {severity['medium']}, Low: {severity['low']}")
            
            # Get repositories
            print("\nüì¶ Repository List:")
            repos = await client.get_repositories()
            for repo in repos['repositories'][:5]:  # Show first 5
                print(f"  {repo['repository']}: {repo['total_vulnerabilities']} vulnerabilities")
            
            # Search for critical vulnerabilities
            print("\nüö® Critical Vulnerabilities:")
            critical_vulns = await client.search_vulnerabilities(severity='critical', limit=5)
            for vuln in critical_vulns['vulnerabilities']:
                print(f"  {vuln['cve_id']}: {vuln['package_name']} ({vuln['repository']})")
            
            # Get executive report
            print("\nüìã Executive Report Summary:")
            report = await client.get_executive_report()
            exec_summary = report['executive_summary']
            print(f"Risk Score: {exec_summary['overall_risk_score']}")
            print(f"Critical Vulnerabilities: {exec_summary['critical_vulnerabilities']}")
            print(f"Repositories Affected: {exec_summary['repositories_affected']}")
            
            print("\n‚úÖ API client example completed successfully!")
            
    except Exception as e:
        print(f"‚ùå Error connecting to API: {e}")
        print("Make sure the API server is running with: python start_api.py")


if __name__ == "__main__":
    asyncio.run(api_example())