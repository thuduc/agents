#!/usr/bin/env python3
"""
Test runner for vulnerability scanning agent
"""

import sys
import subprocess
import os
from pathlib import Path


def run_tests():
    """Run the test suite"""
    # Add src to Python path
    src_path = Path(__file__).parent / "src"
    os.environ['PYTHONPATH'] = str(src_path)
    
    # Run pytest with coverage
    cmd = [
        sys.executable, '-m', 'pytest',
        'tests/',
        '-v',
        '--tb=short',
        '--cov=src',
        '--cov-report=term-missing',
        '--cov-report=html:htmlcov'
    ]
    
    print("🧪 Running vulnerability scanner test suite...")
    print(f"Command: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=False)
    
    if result.returncode == 0:
        print("\n✅ All tests passed!")
        print("📊 Coverage report generated in htmlcov/")
    else:
        print("\n❌ Some tests failed!")
        return False
    
    return True


def run_linting():
    """Run code quality checks"""
    print("\n🔍 Running code quality checks...")
    
    # Run flake8
    print("Running flake8...")
    result = subprocess.run([sys.executable, '-m', 'flake8', 'src/', '--max-line-length=120'], 
                          capture_output=True, text=True)
    
    if result.returncode == 0:
        print("✅ flake8: No issues found")
    else:
        print("❌ flake8: Issues found")
        print(result.stdout)
    
    # Run black (check only)
    print("Running black (check mode)...")
    result = subprocess.run([sys.executable, '-m', 'black', '--check', 'src/'], 
                          capture_output=True, text=True)
    
    if result.returncode == 0:
        print("✅ black: Code is properly formatted")
    else:
        print("❌ black: Code formatting issues found")
        print(result.stdout)


def run_security_checks():
    """Run security checks"""
    print("\n🛡️ Running security checks...")
    
    # Run bandit
    print("Running bandit...")
    result = subprocess.run([sys.executable, '-m', 'bandit', '-r', 'src/', '-f', 'json'], 
                          capture_output=True, text=True)
    
    if result.returncode == 0:
        print("✅ bandit: No security issues found")
    else:
        print("⚠️ bandit: Potential security issues found")
        # Parse JSON output for better display
        try:
            import json
            bandit_results = json.loads(result.stdout)
            for issue in bandit_results.get('results', []):
                print(f"  {issue['filename']}:{issue['line_number']} - {issue['issue_text']}")
        except:
            print(result.stdout)
    
    # Run safety
    print("Running safety check...")
    result = subprocess.run([sys.executable, '-m', 'safety', 'check'], 
                          capture_output=True, text=True)
    
    if result.returncode == 0:
        print("✅ safety: No known security vulnerabilities in dependencies")
    else:
        print("⚠️ safety: Known vulnerabilities found in dependencies")
        print(result.stdout)


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Run tests and quality checks')
    parser.add_argument('--tests-only', action='store_true', help='Run only tests')
    parser.add_argument('--lint-only', action='store_true', help='Run only linting')
    parser.add_argument('--security-only', action='store_true', help='Run only security checks')
    parser.add_argument('--all', action='store_true', help='Run all checks (default)')
    
    args = parser.parse_args()
    
    # Default to all if no specific option chosen
    if not any([args.tests_only, args.lint_only, args.security_only]):
        args.all = True
    
    success = True
    
    if args.tests_only or args.all:
        success &= run_tests()
    
    if args.lint_only or args.all:
        run_linting()
    
    if args.security_only or args.all:
        run_security_checks()
    
    if success:
        print("\n🎉 All checks completed!")
    else:
        print("\n💥 Some checks failed!")
        sys.exit(1)