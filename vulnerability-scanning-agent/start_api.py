#!/usr/bin/env python3
"""
Start the vulnerability dashboard API server
"""

import asyncio
import logging
import sys
import argparse
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.models import Config
from src.dashboard.api import VulnerabilityDashboardAPI
from src.config.manager import ConfigManager


async def main():
    """Main entry point for the API server"""
    parser = argparse.ArgumentParser(description='Vulnerability Dashboard API')
    parser.add_argument('--config', '-c', help='Configuration file path')
    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to')
    parser.add_argument('--port', type=int, default=8080, help='Port to bind to')
    
    args = parser.parse_args()
    
    # Setup logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Load configuration
    config_manager = ConfigManager(args.config)
    config_manager.setup_logging()
    config = config_manager.get_config()
    
    # Create API server
    dashboard = VulnerabilityDashboardAPI(Config(
        bitbucket_workspace=config.bitbucket.workspace,
        bitbucket_username=config.bitbucket.username,
        bitbucket_app_password=config.bitbucket.app_password,
        nvd_api_key=config.cve_sources.nvd_api_key,
        snyk_api_token=config.cve_sources.snyk_api_token,
        oss_index_username=config.cve_sources.oss_index_username,
        oss_index_token=config.cve_sources.oss_index_token,
        dynamodb_region=config.database.region,
        dynamodb_table_prefix=config.database.table_prefix,
        scan_schedule=config.scanning.schedule,
        max_concurrent_scans=config.scanning.max_concurrent_scans,
        scan_timeout=config.scanning.scan_timeout
    ))
    
    # Initialize storage
    await dashboard.storage.initialize_tables()
    
    # Run the API server
    host = args.host or config.api.host
    port = args.port or config.api.port
    
    logging.info(f"Starting vulnerability dashboard API on {host}:{port}")
    dashboard.run(host=host, port=port)


if __name__ == "__main__":
    asyncio.run(main())